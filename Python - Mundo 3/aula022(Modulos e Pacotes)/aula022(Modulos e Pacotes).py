'''
MODULARIZAÇÃO DE CÓDIGOS

EXEMPLO 1:

def fatorial(n):
    f = 1
    for c in range(1, n+1):
        f *= c
    return f

def dobro(n):
    return n*2

def triplo(n):
    return n*3

--> PARA SIMPLIFICAR, EU POSSO COLOCAR O CÓDIGO ACIMA COM AS FUNÇÕES E ADICIONAR EM UM ARQUIVO SEPARADO, POR EXEMPLO "UTEIS.PY"

PARA CHAMAR AS FUNÇÕES DENTRO DE "UTEIS.PY" É SÓ CHAMAR NO CÓDIGO ABAIXO: import uteis OU from uteis import fatorial, dobro (Pra evitar que se declare a palavra "uteis" antes de declarar a função)
      

num = int(input("Digite um valor"))
fat = uteis.fatorial(num)
print(f"O fatorial de {num} é {fat}")
print(f"O dobro de {num} é {uteis.dobro{num}})


PACOTES (PARA MÓDULOS QUE FICARAM MUITO GRANDES) --> JUNÇÃO DE MÓDULOS SEPARADOS POR ASSUNTOS

POR EXEMPLO:

"PACOTES ÚTEIS" - SEPARANDO UM MÓDULO DE FUNÇÕES POR "NÚMEROS", OUTRO MÓDULOS DE FUNÇÕES POR "STRINGS", OUTRO MÓDULOS DE FUNÇÕES POR "DATAS" E ETC...

DAÍ DÁ PRA ESPECIFICAR QUAL MÓDULO DO PACOTE DESEJA IMPORTAR, EXEMPLO: FROM UTEIS IMPORT NUMEROS

NA PRÁTICA, TODO ARQUIVO .PY PODE SER CONSIDERADO UM MÓDULO, E TODA PASTA PODE SER CONSIDERADA UM PACOTE
EXEMPLO: UTEIS (PACOTE)
            -> NUMEROS (MODULO)
            -> STRINGS (MODULO)...

EXISTE UM ARQUIVO ESPECIAL QUE PODE-SE COLOCAR EM CADA UMA DAS PASTAS QUE ARMAZENA OS MODULOS, CHAMADO __init__.py (dentro desse arquivo deve-se colocar a função referente ao módulo especificado)

DESAFIOS:

107: CRIE UM MÓDULO CHAMADO moeda.py QUE TENHA AS FUNÇÕES INCORPORADAS aumentar(), diminuir(), dobro() e metade().
FAÇA TAMBÉM UM PROGRAMA QUE IMPORTE ESSE MÓDULO E USE ALGUMAS DESSAS FUNÇÕES

108: ADAPTE O CÓDIGO DO DESAFIO 107, CRIANDO UMA FUNÇÃO ADICIONAL CHAMADA moeda() QUE CONSIGA MOSTRAR OS VALORES COMO UM VALOR MOENETÁRIO FORMATADO

109: MODIFIQUE AS FUNÇÕES QUE FORAM CRIADAS NO DESAFIO 107 PARA QUE ELAS ACEITEM UM PARÂMETRO A MAIS, INFORMANDO SE O VALOR RETORNADO POR ELAS VAI SER OU NÃO FORMATADO PELA FUNÇÃO moeda(), DESENVOLVIDA NO DESAFIO 108

110: ADICIONE AO MÓDULO moeda.py CRIADO NOS DESAFIOS ANTERIORES, UMA FUNÇÃO CHAMADA resumo(), QUE MOSTRE NA TELA ALGUMAS INFORMAÇÕES GERADA PELAS FUNÇÕES QUE JÁ TEMOS NO MÓDULO CRIADO ATÉ AQUI

111: CRIE UM PACOTE CHAMADO utilidadesCeV QUE TENHA DOIS MÓDULOS INTERNOS CHAMADOS MOEDA E DADO. TRANSFIRA TODAS AS FUNÇÕES UTILIZADAS NOS DESAFIOS 107, 108 E 109 PARA O PRIMEIRO PACOTE E MANTENHA TUDO FUNCIONANDO

112: DENTRO DO PACOTE utilidadeCeV QUE CRIAMOS NO DESAFIO 111, TEMOS UM MÓDULO CHAMADO DADO. CRIE UMA FUNÇÃO CHAMADA leiaDinheiro() QUE SEJA CAPAZ DE FUNCIONAR COMO A FUNÇÃO input(), MAS COM UMA VALIDAÇÃO DE DADOS PARA ACEITAR APENAS VALORES QUE SEJA MONETÁRIOS
'''